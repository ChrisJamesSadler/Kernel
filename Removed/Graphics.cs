namespace Kernel.System.Drawing
{
    public static unsafe class Graphics
    {
        private static byte[] fontData = new byte[]
        {
            0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x63,0x63,0x63,0x63,0x63,0x63,0x7F,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x63,0x63,0x63,0x63,0x63,0x63,0x7F,0x0,0x63,0x63,0x63,0x63,0x63,0x63,0x7F,0x0,0x63,0x63,0x63,0x63,0x63,0x63,0x7F,0x0,0x63,0x63,0x63,0x63,0x63,0x63,0x7F,0x0,0x63,0x63,0x63,0x63,0x63,0x63,0x7F,0x0,0x63,0x63,0x63,0x63,0x63,0x63,0x7F,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3E,0x7F,0xFF,0xFF,0xFF,0xFD,0x3C,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x63,0x63,0x63,0x63,0x63,0x63,0x7F,0x0,0x63,0x63,0x63,0x63,0x63,0x63,0x7F,0x0,0x63,0x63,0x63,0x63,0x63,0x63,0x7F,0x0,0x63,0x63,0x63,0x63,0x63,0x63,0x7F,0x0,0x63,0x63,0x63,0x63,0x63,0x63,0x7F,0x0,0x63,0x63,0x63,0x63,0x63,0x63,0x7F,0x0,0x63,0x63,0x63,0x63,0x63,0x63,0x7F,0x0,0x63,0x63,0x63,0x63,0x63,0x63,0x7F,0x0,0x63,0x63,0x63,0x63,0x63,0x63,0x7F,0x0,0x63,0x63,0x63,0x63,0x63,0x63,0x7F,0x0,0x63,0x63,0x63,0x63,0x63,0x63,0x7F,0x0,0x63,0x63,0x63,0x63,0x63,0x63,0x7F,0x0,0x63,0x63,0x63,0x63,0x63,0x63,0x7F,0x0,0x63,0x63,0x63,0x63,0x63,0x63,0x7F,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x3,0x3,0x3,0x3,0x3,0x0,0x3,0x7,0x7,0x7,0x0,0x0,0x0,0x0,0x0,0x1F,0x1F,0x3F,0x1F,0xF,0x3F,0xF,0xF,0xF,0x1F,0x7,0xF,0x1E,0x1E,0x1F,0x1F,0x67,0x7F,0x3F,0x3F,0xFC,0xFC,0xFE,0xF6,0x1F,0x1B,0x1F,0xE,0x3F,0x3D,0x3B,0x7F,0x1,0x1,0x1,0x0,0x0,0x0,0x0,0x0,0x6,0x3,0x3,0x3,0x1,0x1,0x3,0x3,0x1,0x3,0x7,0x7,0x6,0x6,0x7,0x7,0x3,0xF,0x7,0x7,0x0,0x0,0x0,0x0,0x0,0x0,0xE,0xE,0x3F,0xE,0xE,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0x0,0x0,0x7,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x7,0x7,0x3,0x3,0x3,0x1,0x1,0x1,0xF,0x1F,0x19,0x19,0x19,0x19,0x1F,0xF,0xE,0xF,0xF,0xE,0xE,0xE,0xE,0xE,0xF,0x1D,0x1C,0x1C,0xE,0x7,0x3,0x1F,0xF,0x1F,0x1C,0xE,0x1C,0x18,0x1D,0xF,0xC,0xE,0xF,0xF,0xF,0x1F,0xC,0xC,0x1F,0x3,0x3,0x1F,0x1B,0x18,0x1D,0xF,0x1F,0x1B,0x1,0x1F,0x1B,0x19,0x1B,0xF,0x1F,0x1C,0xC,0xE,0x6,0x7,0x7,0x3,0xF,0x1F,0x1F,0xF,0x1F,0x1D,0x1F,0xF,0xF,0x1F,0x19,0x1F,0x1F,0x18,0x1D,0xF,0x0,0x0,0x3,0x0,0x0,0x0,0x0,0x3,0x0,0x0,0x3,0x0,0x0,0x0,0x0,0x3,0x0,0x0,0x38,0xF,0x3,0xF,0x38,0x0,0x0,0x0,0x0,0x3F,0x0,0x3F,0x0,0x0,0x0,0x0,0x3,0xF,0x38,0xF,0x3,0x0,0x1F,0x19,0x18,0x1C,0xE,0x6,0x0,0x6,0xFC,0xC7,0xFF,0xEF,0x6F,0xE7,0xFF,0xFF,0xE,0xE,0x1F,0x1B,0x3B,0x3F,0x31,0x71,0x3F,0x33,0x33,0x3F,0x33,0x33,0x33,0x3F,0x3E,0x73,0x63,0x1,0x1,0x63,0x73,0x3F,0x3F,0x73,0x73,0x63,0x63,0x73,0x73,0x3F,0x3F,0x3,0x3,0x3F,0x3,0x3,0x3,0x7F,0x3F,0x3,0x3,0x1F,0x3,0x3,0x3,0x3,0x3E,0x73,0x63,0x1,0xF9,0xE3,0xE3,0x7E,0x73,0x73,0x73,0x7F,0x73,0x73,0x73,0x73,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0xC,0xC,0xC,0xC,0xC,0xD,0xD,0xF,0x7B,0x1F,0xF,0xF,0x1F,0x1F,0x3B,0x73,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3F,0xE3,0xE7,0xF7,0xF7,0xFF,0xFF,0xDF,0xDF,0x73,0x77,0x77,0x7F,0x7F,0x7B,0x7B,0x73,0x3E,0x73,0xE3,0xE1,0xE1,0xE3,0x73,0x3E,0x3F,0x33,0x73,0x33,0x3F,0x3,0x3,0x3,0x3E,0x73,0x63,0xE1,0xE1,0x7B,0x7B,0xFE,0x3F,0x73,0x73,0x3F,0x1B,0x3B,0x73,0x73,0x1F,0x33,0x3,0xF,0x38,0x30,0x33,0x1F,0x3F,0xE,0xE,0xE,0xE,0xE,0xE,0xE,0x73,0x73,0x73,0x73,0x73,0x73,0x73,0x3F,0x71,0x31,0x33,0x3B,0x1F,0x1F,0xE,0xE,0x39,0xB9,0xFD,0xFF,0xEF,0xEF,0xEF,0xE7,0x33,0x1B,0x1F,0xE,0xE,0x1F,0x3B,0x71,0x71,0x3B,0x1B,0x1E,0xE,0xE,0xE,0xE,0x3F,0x38,0x1C,0xE,0x6,0x3,0x1,0x3F,0x7,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x3,0x3,0x3,0x7,0x7,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x7,0x7,0xF,0xD,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x3,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xF,0x1F,0x1F,0x1F,0x1D,0x1F,0x3,0x3,0x1F,0x3B,0x3B,0x3B,0x1B,0x1F,0x0,0x0,0x1F,0x1B,0x1,0x1,0x1B,0x1F,0x38,0x38,0x3F,0x3B,0x3B,0x3B,0x3B,0x3F,0x0,0x0,0x1F,0x1B,0x1F,0x3,0x1B,0x1F,0x7,0x3,0x7,0x3,0x3,0x3,0x3,0x3,0x0,0x0,0x3F,0x3B,0x3B,0x3B,0x3B,0x3F,0x3,0x3,0x1F,0x1B,0x3B,0x3B,0x3B,0x3B,0x3,0x0,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x0,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x1F,0xF,0x7,0xF,0xF,0x1F,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x0,0x0,0x7F,0xFF,0xFF,0xFF,0xFF,0xFF,0x0,0x0,0x1F,0x3B,0x3B,0x3B,0x3B,0x3B,0x0,0x0,0x1F,0x1B,0x3B,0x3B,0x1B,0x1F,0x0,0x0,0x1F,0x1B,0x3B,0x3B,0x1B,0x1F,0x0,0x0,0x3F,0x3B,0x3B,0x3B,0x3B,0x3F,0x0,0x0,0x7,0x3,0x3,0x3,0x3,0x3,0x0,0x0,0xF,0xB,0x7,0x1E,0x1C,0xF,0x3,0x3,0x7,0x3,0x3,0x3,0x3,0x7,0x0,0x0,0x1B,0x1B,0x1B,0x1B,0x1F,0x1F,0x0,0x0,0x1D,0x1D,0xF,0xF,0xF,0x7,0x0,0x0,0x6D,0x7F,0x7F,0x7F,0x3F,0x3F,0x0,0x0,0x1F,0xF,0x7,0x7,0xF,0x1D,0x0,0x0,0x19,0x1F,0xF,0xF,0x7,0x6,0x0,0x0,0x1F,0xC,0x6,0x3,0x1,0x1F,0x7,0x3,0x3,0x3,0x1,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x6,0x3,0x3,0x3,0x0,0x0,0x0,0x37,0x1F,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
        };

        public static void DrawText(int X, int Y, string msg, uint Colour)
        {
            for (int c = 0; c < msg.Length; c++)
            {
                int pointer = msg[c] * 8;
                for (int y = 0; y < 8; y++)
                {
                    for (int x = 0; x < 8; x++)
                    {
                        if (IsBitSet(fontData[pointer + y], x))
                        {
                            SetPixel(X + x, Y + y, Colour);
                        }
                    }
                }
                X += 10;
            }
        }

        public static bool SetPixel(int X, int Y, uint Colour)
        {
            uint* where = Settings.DisplayBuffer + (Y * Settings.DisplayWidth) + X;
            where[0] = Colour;
            return true;
        }

        private static bool IsBitSet(byte b, int pos)
        {
            return (b & (1 << pos)) != 0;
        }

        public static ChangeVideoMode EnterTextMode
        {
            get
            {
                return Settings.EnterTextMode;
            }
        }

        public static ChangeVideoMode EnterVideoMode
        {
            get
            {
                return Settings.EnterVideoMode;
            }
        }

        public static void Clear(uint Colour)
        {
            if(Settings.gDriver == null)
            {
                return;
            }
            Settings.gDriver.Clear(Colour);
        }

        public static void DrawRectangle(int X, int Y, int Width, int Height, uint Colour)
        {
            if (Settings.gDriver == null)
            {
                return;
            }
            Settings.gDriver.DrawRectangle(X, Y, Width, Height, Colour);
        }

        public static void DrawRectangleEmpty(int X, int Y, int Width, int Height, uint Colour)
        {
            if (Settings.gDriver == null)
            {
                return;
            }
            Settings.gDriver.DrawRectangleEmpty(X, Y, Width, Height, Colour);
        }

        public static void DrawLine(int x0, int y0, int x1, int y1, uint Colour)
        {
            if (Settings.gDriver == null)
            {
                return;
            }
            Settings.gDriver.DrawLine(x0, y0, x1, y1, Colour);
        }

        public static void Update()
        {
            if (Settings.gDriver == null)
            {
                return;
            }
            Settings.gDriver.Update();
        }
    }
}